<%= form_with url: ai_judge_prompt_path, model: ai_judge do |form| %>
  <% if ai_judge.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(ai_judge.errors.count, "error") %> prohibited this Prompt from being saved:</h2>

      <ul>
        <% ai_judge.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  
  <%= form.hidden_field :book_id, value: @book.id if @book %>
  
  <div class="row gx-5">
    <div class="col-md-6">
      <h2>Prompt Settings</h2>
      <div>
        <div>
          <%= form.label :openai_key, style: "display: block" %>
          <%= form.text_field :openai_key %>
        </div>
      
        <div>
          <%= form.label :system_prompt, style: "display: block" %>
          <%= form.textarea :system_prompt, class: "form-control", rows: 10  %>
        </div>
      
        <div>
          <%= form.submit 'Refine Prompt' %>
        </div>
      </div>
      <% if @judgement %>
      <h2>Rating Information</h2>
      <div>
        Rated as:
        <%= @judgement.rating %>
        <br/>

        <%= @judgement.explanation %>
        
      </div>
      <% end %>
    </div>
    <div class="col-md-6">
      <h2>Query Doc Pair</h2>
      <div>        
        <%= fields_for :query_doc_pair, query_doc_pair do |query_doc_pair_fields| %>
            
          <div class="field">
            <%= query_doc_pair_fields.label :query_text %>
            <%= query_doc_pair_fields.text_field :query_text %>
          </div>
        
          <div class="field">
            <%= query_doc_pair_fields.label :doc_id, "Doc ID" %>
            <%= query_doc_pair_fields.text_field :doc_id %>
          </div>
          
          <div class="field">
            <%= query_doc_pair_fields.label :information_need, "Information Need" %>
            <%= query_doc_pair_fields.text_field :information_need, size: 80 %>
          </div>
          
          <div class="field">
            <%= query_doc_pair_fields.label :document_fields %> <small>Either text or JSON</small><br/>
            <%= query_doc_pair_fields.text_area :document_fields, size: "80x8" %>
          </div>          
          
          <div class="field">
            <%= query_doc_pair_fields.label :options %> <small>JSON</small><br/>
            <%= query_doc_pair_fields.text_area :options, size: "80x8" %>
          </div>  
          
          <div class="field">
            <%= query_doc_pair_fields.label :notes %><br/>
            <%= query_doc_pair_fields.text_area :notes, size: "80x8" %>
          </div>  
          
          <div class="field">
            <%= query_doc_pair_fields.label :position %>
            <%= query_doc_pair_fields.text_field :position %>
          </div>
        
   
        <% end %>
      </div>
    </div>
  </div>

 
<% end %>


<script language="javascript">
  const codemirrorEditor = CodeMirror.fromTextArea(document.getElementById('query_doc_pair_document_fields'), {
    mode: "application/json",
    lineNumbers: true,
    gutters: ["CodeMirror-lint-markers"],
    lint: true
  });
  codemirrorEditor.setSize(null, 400);
  
  let content = codemirrorEditor.getValue();
  try {
    codemirrorEditor.setValue(JSON.stringify(JSON.parse(content), null, 2));
  } catch(e) {
    console.error("Invalid JSON");
  }
  
  
  // Function to validate JavaScript syntax
  function validateSyntax(code) {
    try {
      // We can NOT validate this until we have working functions.
      // like setScore etc defined in this space.
      // Use the built-in `eval` function to check the syntax
      //eval(code);
      return true;
    } catch (error) {
      return false;
    }
  }
  
  // Validate syntax on code change
  codemirrorEditor.on("change", function() {
    var code = codemirrorEditor.getValue();
    var isValidSyntax = validateSyntax(code);
    var errorAnnotation = isValidSyntax ? [] : [{
      from: CodeMirror.Pos(0, 0),
      to: CodeMirror.Pos(0, 0),
      message: "Syntax Error",
      severity: "error"
    }];
    CodeMirror.signal(codemirrorEditor, "lint", codemirrorEditor, errorAnnotation);
  });
  
  // Add linting annotations to show syntax errors
  codemirrorEditor.on("lint", function(_, annotations) {
    codemirrorEditor.clearGutter("CodeMirror-lint-markers");
    annotations.forEach(function(annotation) {
      codemirrorEditor.setGutterMarker(annotation.from.line, "CodeMirror-lint-markers", createMarker(annotation));
    });
  });
  
  // Helper function to create gutter marker
  function createMarker(annotation) {
    var marker = document.createElement("div");
    marker.className = "lint-marker " + annotation.severity;
    marker.title = annotation.message;
    return marker;
  }  
</script>

<style>
.lint-marker {
  width: 16px;
  height: 16px;
  background-color: red;
  border-radius: 50%;
}

.lint-marker.error {
  background-color: red;
}
</style>
