
<script>
  function rate(rating, key_name) {
      keyDown(key_name);
      resetStylesExcept(key_name);
      document.getElementById("judgement_rating").value = rating;
      delay(100).then(() => (document.getElementsByName("commit")[0].click()));
  }

  function resetStyles() {
      let keyboard_shortcuts_suffixes = ["a", "s", "d", "f", "g", "h", "j", "k", "l", "sc"];
      keyboard_shortcuts_suffixes.forEach(suffix => {
          const spanElement = document.getElementById("span-for-" + suffix);
          const buttonElement = document.getElementById("button-for-" + suffix);
          
          if (spanElement) {
              spanElement.style.color = "gray";
              spanElement.style.fontWeight = "normal";
          }
          
          if (buttonElement) {
              buttonElement.classList.remove("btn-preselected");
          }
      });
  }

  function resetStylesExcept(except_suffix){
      let keyboard_shortcuts_suffixes = ["a", "s", "d", "f", "g", "h", "j", "k", "l", "sc"];
      keyboard_shortcuts_suffixes.forEach(suffix => {
          if (suffix !== except_suffix) {
              const spanElement = document.getElementById("span-for-" + suffix);
              const buttonElement = document.getElementById("button-for-" + suffix);
              
              if (spanElement) {
                  spanElement.style.color = "gray";
                  spanElement.style.fontWeight = "normal";
              }
              
              if (buttonElement) {
                  buttonElement.classList.remove("btn-preselected");
              }
          }
      });
  }

  function keyDown(suffix) {
      resetStyles();
      const spanElement = document.getElementById("span-for-" + suffix);
      const buttonElement = document.getElementById("button-for-" + suffix);
      
      if (spanElement) {
          spanElement.style.color = "black";
          spanElement.style.fontWeight = "bold";
      }
      
      if (buttonElement) {
          buttonElement.classList.add("btn-preselected");
      }
  }

  function delay(time) {
      return new Promise(resolve => setTimeout(resolve, time));
  }

  function keyPressed(suffix) {
      delay(500).then(() => {
          const buttonElement = document.getElementById("button-for-" + suffix);
          if (buttonElement) {
              buttonElement.click();
          }
      });
  }

  // Function to check if modal is open
  function isExplanationModalOpen() {
      const modal = document.getElementById('explanationModal');
      return modal && modal.classList.contains('show');
  }

  document.addEventListener('keypress', function(e) {
      // Skip if explanation modal is open
      if (isExplanationModalOpen()) {
        return;
      }

      const keyCode = e.which || e.keyCode;
      
      if (keyCode == 97 || keyCode == 65) {
          keyPressed("a");
      } else if (keyCode == 115 || keyCode == 83) {
          keyPressed("s");
      } else if (keyCode == 100 || keyCode == 68) {
          keyPressed("d");
      } else if (keyCode == 102 || keyCode == 70) {
          keyPressed("f");
      } else if (keyCode == 103 || keyCode == 71) {
          keyPressed("g");
      } else if (keyCode == 104 || keyCode == 72) {
          keyPressed("h");
      } else if (keyCode == 106 || keyCode == 74) {
          keyPressed("j");
      } else if (keyCode == 107 || keyCode == 75) {
          keyPressed("k");
      } else if (keyCode == 108 || keyCode == 76) {
          keyPressed("l");
      } else if (keyCode == 59 || keyCode == 186) {
          keyPressed("sc");
      }
  });

  document.addEventListener('keydown', function(e) {
      // Skip if explanation modal is open
      if (isExplanationModalOpen()) {
        return;
      }
      
      const keyCode = e.which || e.keyCode;
      
      if (keyCode == 97 || keyCode == 65) {
          keyDown("a");
      } else if (keyCode == 115 || keyCode == 83) {
          keyDown("s");
      } else if (keyCode == 100 || keyCode == 68) {
          keyDown("d");
      } else if (keyCode == 102 || keyCode == 70) {
          keyDown("f");
      } else if (keyCode == 103 || keyCode == 71) {
          keyDown("g");
      } else if (keyCode == 104 || keyCode == 72) {
          keyDown("h");
      } else if (keyCode == 106 || keyCode == 74) {
          keyDown("j");
      } else if (keyCode == 107 || keyCode == 75) {
          keyDown("k");
      } else if (keyCode == 108 || keyCode == 76) {
          keyDown("l");
      } else if (keyCode == 59 || keyCode == 186) {
          keyDown("sc");
      }
  });
</script>


<%
  @show_keyboard_shortcuts = true
  # Use enhanced JudgementHelper to generate rating buttons with scorer labels
  @rating_buttons = generate_rating_buttons(@book)

  scoring_guidelines = {}
  scoring_guidelines['Poor'] = 'Customer feeling: <i>These results are terrible! Maybe I’ll look somewhere else.</i> <br/><mark>0</mark>’s are used when the result is clearly not desired. The goal is for most queries to only show <mark>1</mark>’s, <mark>2</mark>’s and <mark>3</mark>’s. These are our negative examples.'
  scoring_guidelines['Fair'] = 'Customer feeling: <i>These results aren’t what I’m looking for, but I can see why they were returned.</i> <br/> A <mark>1</mark> (fair) is used for results that have some of the right words, but are not really about what the query is looking for. Having some <mark>1</mark>’s far down the result list can be ok.'
  scoring_guidelines['Good'] = 'Customer feeling: <i>These results are good! Looking them over is worth my time.</i> A <mark>2</mark> (good) is for results that provide survey information or a part of the entire information need.'
  scoring_guidelines['Perfect'] = 'Customer feeling: <i>This is what I am looking for! I do not have to look any further.</i> <br/> A <mark>3</mark> (perfect) is usually reserved for exact results in response to a targeted information need query.'

  scoring_guidelines['Irrelevant'] = 'These are not the droids I am looking for. The result item is not helpful.'
  scoring_guidelines['Relevant'] = 'These appear to be good droids. The result item addresses some aspect of my information need.'


  @document_fields_as_json = document_fields_parses_as_json (query_doc_pair.document_fields)

  image_url = nil
  if !@document_fields_as_json.nil?
    if @document_fields_as_json.has_key?('thumb')
      image_url = @document_fields_as_json['thumb']
    elsif @document_fields_as_json.has_key?('image')
      image_url = @document_fields_as_json['image']
    end
  end

%>

<%= form_for(judgement, url: url_for_form) do |form| %>
  <% if judgement.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(judgement.errors.count, "error") %> prohibited this judgement from being saved:</h2>

      <ul>
        <% judgement.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <% if judgement.user_id != @current_user.id %>
    <div class="alert alert-warning" role="alert">
      This judgement was made by <%= judgement.user.fullname %>!
    </div>
  <% end %>
  <% if image_url %>
  <div class="card mb-3" style="">
    <div class="row g-0">
      <div class="col-md-4 p-2">
        <img src="<%= image_url %>" class="img-fluid rounded-start rounded-end" alt="Thumbnail Image">
      </div>
      <div class="col-md-8">
  <% else %>
  <div class="card">
  <% end %>

  <div class="card-body">
    <h5 class="card-title">Query: <em><%= query_doc_pair.query_text %></em></h5>
    <% if query_doc_pair.information_need %>
      <h6 class="card-subtitle mb-2 text-muted">Information Need: <i><%= query_doc_pair.information_need %></i></h6>
    <% end %>

    <p>
      <a class="card-link" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
        Scoring Guidelines
      </a>
    </p>
    <div class="collapse pb-3" id="collapseExample">
      <div class="card card-body">
        <table class="table table-sm">
          <span>Read more about <a href="https://github.com/o19s/quepid/wiki/Judgement-Rating-Best-Practices" target="_blank">Judgement Rating Best Practices</a></span>
          <tbody>
            <% @rating_buttons.each do |b| %>
            <tr>
              <td><%= button_tag b["label"], type: 'button', style: "background-color: #{b['style']['background-color']}; color: black; border: 1px solid rgba(0,0,0,0.2); font-weight: 500;", class: "btn" %></td>
              <td><%= scoring_guidelines.has_key?(b["label"]) ? scoring_guidelines[b["label"]].html_safe : '' %></td>
            </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
    
    

    <div class="float-end">        
      <%= link_to 'I will Judge Later', book_query_doc_pair_judge_later_path(@book, query_doc_pair), class: 'btn btn-info m-1', role: 'button' %>
      <br/>
      <button type="button" class="btn btn-warning m-1" data-bs-toggle="modal" data-bs-target="#explanationModal">
        I Can't Tell
      </button>
    </div>



    <p class="card-text">
      <%= render 'query_doc_pairs/document_fields', document_fields_as_json: @document_fields_as_json %>
    </p>
    <% if @book.show_rank? %>
    <p class="card-text">
      <b>Document Rank: </b><%= judgement.query_doc_pair.position %>
    </p>
    <% end %>

    <% if @show_keyboard_shortcuts %>
      <table class="padded">
        <tr>
          <td></td>
          <% @rating_buttons.each do |b| %>
            <%
              @button_classes = "btn "
              if judgement.rating == b["value"].to_i
                @button_classes = @button_classes + "btn-preselected "
              end
            %>
            <td class="padded">

              <%= button_tag b["label"], type: 'button', onclick: "rate("+b["value"]+",\""+b["key"][:name].to_s+"\")", style: "background-color: #{b['style']['background-color']}; color: black; border: 1px solid rgba(0,0,0,0.2); font-weight: 500;", class: @button_classes, id:"button-for-#{b["key"][:name]}" %>
            </td>
          <% end %>
        </tr>
        <tr>
          <td><i class="bi-keyboard"></i></td>
          <% @rating_buttons.each do |b| %>
              <td class="keyboard-shortcuts-td"><span class="<%= judgement.rating == b["value"].to_i ? 'bold-and-black' : '' %>" id=<%= "span-for-" + b["key"][:name].to_s %>><%= b["key"][:display_name]%></span></td>
          <% end %>
        </tr>
      </table>
    <% else %>
      <table class="padded">
        <tr>
          <% @rating_buttons.each do |b| %>
            <%
              @button_classes = "btn "
              if judgement.rating == b["value"].to_i
                @button_classes = @button_classes + "btn-preselected "
              end
            %>
            <td class="padded">
              <%= button_tag b["label"], type: 'button', onclick: "rate("+b["value"]+",\""+ b["key"].to_s + "\")", style: "background-color: #{b['style']['background-color']}; color: black; border: 1px solid rgba(0,0,0,0.2); font-weight: 500;", class: @button_classes, id:"button-for-"+b["key"].to_s %>
            </td>
          <% end %>
        </tr>
      </table>
    <% end %>
    
    <% if !judgement.explanation.blank? %>
    <p/>
    <h6 class="card-subtitle">Judging Explanation: <em><%= judgement.explanation %></em></h5>
    <% end %>
  </div>
  <% if image_url %>
      </div>
    </div>
  </div>
  <% else %>
  </div>
  <% end %>

  <%= form.hidden_field :rating %>
  <%= form.hidden_field :query_doc_pair_id, :value => query_doc_pair.id %>
  <%= form.submit class: 'hidden'%>

<% end %>

<!-- Modal -->
<div class="modal fade" id="explanationModal" tabindex="-1" aria-labelledby="explanationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-right">
    <%= form_for(judgement, url: book_query_doc_pair_unrateable_path(@book, query_doc_pair), class: 'form-horizontal', data: { turbo: false }) do |f| %>
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="explanationModalLabel">Record Explanation</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>It is helpful (though optional) if you can record what makes this query/doc pair difficult to judge.</p>
        <p>
          <%= f.text_area :explanation, size: '44x2' %>
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <%= f.submit "Skip Judging",class: 'btn btn-primary' %>
      </div>
     </div>
     <% end %>
  </div>
</div>
