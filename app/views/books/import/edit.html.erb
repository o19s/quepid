<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <h1><i class="bi bi-book"></i> Import Data Into This Book</h1>
  <div class="btn-toolbar mb-2 mb-md-0">
    <div class="btn-group me-2">
      <%= button_to 'Back to Book', book_path(@book), class: "btn btn-sm btn-outline-secondary", method: :get %>
    </div>    
  </div>  
</div>

<div class="card" style="">
  <div class="card-body">
    <h5 class="card-title">Import Query Doc Pairs</h5>
    <p class="card-text">
      The format for importing query doc pair data is the same as that for exporting it: <code><%= link_to api_book_query_doc_pairs_path(@book), api_book_query_doc_pairs_path(@book) %></code>. 
      
      <code>
        <pre>
  {
    "query_doc_pairs":
      [
        {
          "query_doc_pair_id": 123,                // Unique identifier for the query-document pair
          "query_text": "example search query",    // The text of the search query
          "doc_id": "456",                         // Identifier of the document
          "position": 2,                           // Position of document in search results
          "document_fields": {                     // Document content as nested fields
            "title": "Example Movie Title",        // Title of the movie
            "overview": "This is a sample movie description that would appear here...",          
            "thumb": "https://example.com/image.jpg" // URL to thumbnail image
          },
          "information_need": null,                // Optional field for query intent (null if not specified)
          "notes": null,                           // Optional field for additional notes
          "options": null                          // Optional field for additional configuration
        }
        // Additional query doc pair entries would appear here
      ]
    }
        </pre>
      </code>
      If you do NOT provide a <code>query_doc_pair_id</code> then the <code>query_text</code> and <code>doc_id</code> must both be present and will be used to upsert the query doc pair.
    </p>
  
    <% if @book.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(@book.errors.count, "error") %> prohibited this book from being saved:</h2>
    
        <ul>
          <% @book.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
      
      <div class="alert alert-warning" role="alert" >  
        You will need to pick the file to be imported again.
      </div>
    <% end %>
    
    <%= form_with model: @book, url: books_import_index_path do |form| %>
      <div class="mb-3">        
        <%= form.label :import_file,'Select JSON file to import', class:'form-check-label' %>
        <%= form.file_field :import_file, class:'form-control' %>
        <div class="form-text">You can upload either a <code>.json</code> or a zipped JSON file in the format of <code>.json.zip</code>.</div>
      </div>
      
      <%= form.submit "Upload", class: 'btn btn-primary' %>
    <% end %>

  </div>
</div>
<p/>
<div class="card" style="">
  <div class="card-body">
    <h5 class="card-title">Import Judgements</h5>
    <p class="card-text">
      The format for importing Judgement data is the same as that for exporting it: <code><%= link_to api_book_judgements_path(@book), api_book_judgements_path(@book) %></code>. 
      
      <code>
        <pre>
          {
            "all_judgements": [                     // Array containing all judgement entries
              {
                "rating": 3.0,                      // Numerical rating score (e.g., on a scale of 1-5)
                "query_doc_pair_id": 123,           // Unique identifier linking this judgement to a query-document pair
                "unrateable": false,                // Flag indicating if the document cannot be rated
                "judge_later": false,               // Flag indicating if judgement was deferred
                "user_id": 456,                     // Identifier of the user who made this judgement
                "explanation": null                 // Optional explanation of the rating (null if not provided)
              }
              // Additional judgement entries would appear here
            ]
          }
        </pre>
      </code>    
      
        If you provide a <code>email</code> instead of <code>user_id</code> then that will be used to identify the judge.
        If you do NOT provide a <code>query_doc_pair_id</code> then you must provide <code>query_text</code> and <code>doc_id</code> to be used to upsert the query doc pair.
    </p>
    
    <p>
      You may want to import Query Doc Pair information with your Judgements.   You can do this by specifying a <code>query_doc_pair</code> JSON object:
      
      <code>
        <pre>
          {
            "all_judgements": [                     // Array containing all judgement entries
              {
                "rating": 3.0,                      // Numerical rating score (e.g., on a scale of 1-5)
                "query_doc_pair": {
                    "query_text": "example search query",    // The text of the search query
                    "doc_id": "456",                         // Identifier of the document
                    "position": 2,                           // Position of document in search results
                    "document_fields": []                    // Document content as nested fields
                  }
              }

            ]
          }
        </pre>
      </code>       
    </p>
  
    <% if @book.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(@book.errors.count, "error") %> prohibited this book from being saved:</h2>
    
        <ul>
          <% @book.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
      
      <div class="alert alert-warning" role="alert" >  
        You will need to pick the file to be imported again.
      </div>
    <% end %>
    
    <%= form_with model: @book, url: books_import_index_path do |form| %>
      <div class="mb-3">        
        <%= form.label :import_file,'Select JSON file to import', class:'form-check-label' %>
        <%= form.file_field :import_file, class:'form-control' %>
        <div class="form-text">You can upload either a <code>.json</code> or a zipped JSON file in the format of <code>.json.zip</code>.</div>
      </div>
      
      <div class="mb-3">
        <div class="form-check form-switch">
          <%= form.label :force_create_users, class:'form-check-label' %>
          <%= form.check_box :force_create_users, class:'form-check-input' %>
        </div>
        <div class="form-text">Create user records for any judges that don't already exist in this instance of Quepid.</div>
      </div>
      
      <%= form.submit "Upload", class: 'btn btn-primary' %>
    <% end %>

  </div>
</div>
