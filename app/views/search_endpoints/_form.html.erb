<%= form_with(model: search_endpoint) do |form| %>
  <% if search_endpoint.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(search_endpoint.errors.count, "error") %> prohibited this Search Endpoint from being saved:</h2>

      <ul>
        <% search_endpoint.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  
  <% if @current_user.teams.empty? %>
    <div class="alert alert-warning" role="alert">
      Search Endpoints are meant to be shared with Teams, and you do not have any yet.      
      <%= link_to 'Create a Team', teams_core_path, method: :get, class:'btn btn-primary' %>
    </div>
  <% end %>
  
  <div class="mb-3">
    <%= form.label :name, class: 'form-label' %>
    <%= form.text_field :name %>
    <div class="form-text">Use a name to distingush the end point, like Dev or Stage or Prod.</div>
  </div>

  <div class="mb-3">
    <%= form.label :search_engine, class: 'form-label' %>
    <%
    options = [['Solr', 'solr'], ['Elasticsearch', 'es'], ['OpenSearch', 'os'], ['Vectara', 'vectara'], ['Static File', 'static'], ['Search API', 'searchapi']]
    %>
    <%= form.collection_select :search_engine, options, :last, :first, required: true, prompt:true,  class: 'form-control' %>
    
  </div>
  
  <div class="mb-3 col-12">
    <%= form.label :endpoint_url, class: 'form-label' %>
    <%= form.text_field :endpoint_url, size: 100 %>

    <div class="form-text">Want to avoid CORS by proxying requests through Quepid server?  Just prepend the url with <code><%= "#{proxy_fetch_url}?url="  %></code></div>
      
  </div>

  <div class="mb-3">
    <%= form.label :custom_headers, class: 'form-label' %>
    <%= form.text_field :custom_headers %>
  </div>

  <div class="mb-3">
    <%= form.label :api_method, class: 'form-label' %>
    <%= form.collection_select :api_method, [['GET', 'GET'], ['POST', 'POST'], ['JSONP', 'JSONP'], ['PUT', 'PUT']], :last, :first, required: true, prompt:true,  class: 'form-control' %>    
  </div>
  
  <div class="mb-3">
    <div class="form-check form-switch">
      <%= form.label :proxy_requests, class:'form-check-label' %>
      <%= form.check_box :proxy_requests, class:'form-check-input' %>
    </div>
    <div class="form-text">Proxied requests avoid browser security issues however Quepid must be able to reach your Search Endpoint.</div>
  </div>  
  
  <div class="mb-3">
    <%= form.label :basic_auth_credential, class: 'form-label' %>
    <%= form.text_field :basic_auth_credential %>
  </div>
  
  <div class="mb-3">
    <%= form.label :mapper_code, class: 'form-label' %>
    <div class="form-text">This Javascript is run in the browser to map custom search api responses to what Quepid understands.</div>
    <%= form.text_area :mapper_code %>
  </div>
  
  <div class="mb-3">
    <div class="form-check form-switch">
      <%= form.label :archived, class:'form-check-label' %>
      <%= form.check_box :archived, class:'form-check-input' %>
    </div>
    <div class="form-text">Archived search endpoints can't be selected for use.</div>
  </div>
  
  <div class="mb-3">     
    <%= form.label :teams, "Teams to Share this Endpoint With", class: 'form-label' %>
    <%= form.collection_check_boxes(:team_ids, @current_user.teams, :id, :name) do |b| %>
      <div class="collection-check-box">
        <%= b.check_box %>
        <%= b.label %>
      </div>
    <% end %>
    <div class="form-text">Search endpoints are meant to be shared, and you do this by picking which teams can use them.</div>
  </div>
  

  <div class="actions">
    <%= form.submit class: "btn btn-primary" %>
  </div>
<% end %>

<script>
  const codemirrorEditor = CodeMirror.fromTextArea(document.getElementById('search_endpoint_mapper_code'), {
    mode: "javascript",
    lineNumbers: true,
    gutters: ["CodeMirror-lint-markers"],
    lint: true
  });
  codemirrorEditor.setSize(null, 400);
  
  // Function to validate JavaScript syntax
  function validateSyntax(code) {
    try {
      // Use the built-in `eval` function to check the syntax
      eval(code);
      return true;
    } catch (error) {
      return false;
    }
  }
  

  // Validate syntax on code change
  codemirrorEditor.on("change", function() {
    var code = codemirrorEditor.getValue();
    var isValidSyntax = validateSyntax(code);
    var errorAnnotation = isValidSyntax ? [] : [{
      from: CodeMirror.Pos(0, 0),
      to: CodeMirror.Pos(0, 0),
      message: "Syntax Error",
      severity: "error"
    }];
    CodeMirror.signal(codemirrorEditor, "lint", codemirrorEditor, errorAnnotation);
  });

  // Add linting annotations to show syntax errors
  codemirrorEditor.on("lint", function(_, annotations) {
    codemirrorEditor.clearGutter("CodeMirror-lint-markers");
    annotations.forEach(function(annotation) {
      codemirrorEditor.setGutterMarker(annotation.from.line, "CodeMirror-lint-markers", createMarker(annotation));
    });
  });

  // Helper function to create gutter marker
  function createMarker(annotation) {
    var marker = document.createElement("div");
    marker.className = "lint-marker " + annotation.severity;
    marker.title = annotation.message;
    return marker;
  }  
</script>

<style>
  .lint-marker {
    width: 16px;
    height: 16px;
    background-color: red;
    border-radius: 50%;
  }

  .lint-marker.error {
    background-color: red;
  }
</style>
